{
  "headerSection": {
    "line1": "Mein Name ist ",
    "line2": ", und diese Seite ",
    "line3": "ist mein personalisiertes Portfolio",
    "line4": "entwickelt mit ",
    "name": "Mark",
    "codeLang": "React"
  },
  "profileSection": {
    "line1": "Ich bin ein Full Stack Web Developer, der in Großbritannien geboren wurde, aber in Deutschland wohnt.",
    "line2": "Full-Stack-Webentwickler mit einem Hintergrund in digitaler Technologie und Entwicklung. Fähigkeiten in der Erstellung von Front-End- und Back-End-Apps, einschließlich Webseiten und sowohl webbasierten (WPA) als auch nativen Apps. Responsive, barrierefreie und benutzerfreundliche Designs, Entwicklung, Fehlersuche und Einführung. Ich freue mich darauf, die Zukunft der Webentwicklung und der Technologiebranche mitzugestalten."
  },
  "toggleSkills": {
    "hide": "Verbergen",
    "show": "Anzeigen"
  },
  "workTitle": {
    "title": "Meine Arbeit"
  },
  "projectLabels": {
    "introTitle": "Was ist das?",
    "processTitle": "der Entwicklungsprozess",
    "technologies": "Entwickelt mit: ",
    "visitSite": "Besuche die Seite: ",
    "visitRepo": "Besuche das Repository: "
  },
  "project1": {
    "introText": "Eine App, die die Seite dynamisch mit Pokemon-Daten aus einer API auffüllt. Die App ermöglicht es dir, die Liste nach einem Pokemon anhand seines Namens zu durchsuchen. Wenn du darauf klickst, erscheint ein modales Fenster mit dem Namen, dem Typ und einem Bild des Pokemons. Sie wurde mit JavaScript, HTML und CSS mit Bootstrap-Styling erstellt.",
    "para1": "Das Ziel dieses Projekts war die Beherrschung von JavaScript, um eine App zu erstellen, die effizient Daten von einer API abrufen und sie mit Hilfe von Bootstrap-Karten und Modals auf der Seite anzeigen kann. Die API-Daten waren im Json-Format gespeichert. Sie mussten also mit JavaScript-API-Aufrufen abgerufen und dann dem DOM hinzugefügt werden, indem die erforderlichen HTML-Elemente erstellt und angehängt wurden, um die Daten korrekt anzuzeigen.",
    "para2": "Ich startete diese Aufgabe, indem ich ein grundlegendes HTML-Layout anlegte, das ich später zum Einfügen der relevanten Elemente und API-Daten aus JavaScript verwenden konnte. Als nächstes begann ich mit der Arbeit an JavaScript-Versprechen, führte gründliche Tests durch und nutzte die Konsolenprotokollierung, um Probleme in den API-Aufrufen zu identifizieren. Durch diesen iterativen Ansatz konnte ich die Probleme effektiv beheben und die Daten erfolgreich aus der API abrufen. Sobald ich die benötigten Daten erfolgreich abrufen konnte, begann ich damit, die API-Daten in die Seite zu integrieren, indem ich die erforderlichen Bootstrap-Elemente und -Klassen anlegte und sie zusammen mit den Daten an die Seite anfügte. Nach einigen Tests und Änderungen am Code und Styling reichte dies aus, um die zu Beginn des Projekts aufgestellten Kriterien erfolgreich zu erfüllen. Ein Problem, das ich nur schwer lösen konnte, betraf die Leistung - es gab eine kleine, aber spürbare Verzögerung bei der Anzeige der Daten auf der Seite, die zum ersten Mal geladen wurde. Nachdem ich verschiedene Lösungen ausprobiert hatte, einschließlich der Anpassung von asynchronen Anfragen, stellte sich heraus, dass diese Verzögerung größtenteils unvermeidlich war (die Zeit, die benötigt wurde, um die Daten von der API abzurufen und sie auf die Seite zu laden). Um dieses Problem zu umgehen, fügte ich einen Ladebildschirm mit einem animierten Fortschrittsbalken hinzu, der beim Laden der Seite erschien und dann verschwand, nachdem die Pokémon-Daten erfolgreich geladen worden waren.",
    "para3": "Nachdem ich die Ziele des Projekts erreicht und seine Funktionalität überprüft hatte, machte ich mich daran, zusätzliche Features hinzuzufügen, die das Projekt meiner Meinung nach verbessern würden. Zunächst fügte ich mit Hilfe von Bootstrap-Formularklassen eine Suchleiste in den HTML-Code ein, mit der der Benutzer nach seinem Lieblings-Pokémon suchen kann. Damit dies funktioniert, habe ich eine Filtermethode im JavaScript verwendet, die nur die Pokémon anzeigt, die dem vom Benutzer eingegebenen Text entsprechen, und den Rest ausblendet. Außerdem fügte ich für jedes Pokémon eine Kartenfarbe auf der Grundlage seines Pokémon-Typs hinzu. Dazu musste ich zunächst auf die entsprechenden Json-Daten aus der API zugreifen und sie überprüfen und dann die passende Klassenfarbe zu dieser Karte hinzufügen, um jedem Typ eine eigene Farbe zu geben.",
    "para4": "Das Endergebnis dieser Bemühungen war die erfolgreiche Erstellung einer Pokémon-Datenbankanwendung, die fast vollständig in JavaScript geschrieben wurde. Das erfolgreiche Abrufen der Daten und die dynamische Anzeige auf der Seite reichten aus, um ein erfolgreiches Projekt anzulegen. Ich denke jedoch, dass die zusätzlichen Features der Suchnavigation und des Ladebildschirms die App zu einem viel benutzerfreundlicheren Produkt gemacht haben.",
    "technologies": "HTML, CSS, Bootstrap, JavaScript"
  },
  "project2": {
    "introText": "Die serverseitige Komponente einer Filmanwendung im IMDB-Stil. Sie enthält eine Datenbank mit Daten zu verschiedenen Filmen, wie z.B. das Genre, die Beschreibung, das Titelbild usw., Informationen über registrierte Benutzer (einschließlich Datensicherheitsmethoden) und Endpunkte, die eingerichtet wurden, um clientseitigen Anwendungen die Interaktion mit der Datenbank zu ermöglichen.",
    "para1": "Die Hauptanforderung bei diesem Projekt war der Aufbau einer Datenbank mit Filmen und den dazugehörigen Daten. Die Datenbank musste von clientseitigen Anwendungen aus zugänglich sein und CRUD-Operationen ermöglichen. Außerdem sollte die Datenbank clientseitigen Anwendungen ermöglichen, Daten über registrierte Benutzer zu speichern und abzurufen, damit diese sich registrieren und anmelden können.",
    "para2": "Ich startete, indem ich Node.js und Express verwendete, um die wesentlichen Anfragen und Endpunkte anzulegen, die die relevanten CRUD-Anfragen für die clientseitige Anwendung ermöglichen würden. Der nächste Schritt war die Erstellung der Datenbank. Hierfür wurde MongoDB aufgrund seiner Zuverlässigkeit und Leistung, aber auch wegen seiner Flexibilität als relationale Datenbank gewählt. Dies ermöglichte die Erstellung eines eigenen Schemas für das Projekt, das mit Mongoose angelegt wurde. Nachdem das Schema, die Endpunkte und Sammlungen in MongoDB eingerichtet waren, habe ich postman verwendet, um CRUD-Operationen der Datenbank über die angegebenen Endpunkte zu testen. Bei der Durchführung von CRUD-Operationen mit dem Benutzer fehlte jedoch noch eine Schlüsselkomponente - die Benutzerauthentifizierung und -validierung. Dies wurde durch JSON-Web-Token erledigt, die für jeden Benutzer ein Token generierten. Dies wiederum erforderte das Middleware-Paket Passport, das mit Express arbeitet, um Token zu validieren und Benutzer zu authentifizieren. Um die Funktionalität sicherzustellen, habe ich erneut postman verwendet, um die Endpunkte zu testen.",
    "para3": "Eine der wichtigsten Verbesserungen, die ich vornehmen wollte, stellte jedoch auch die größte Challenge dar - eine Verschlüsselungsmethode zur Verbesserung der Sicherheit bei der Authentifizierung und Autorisierung. Um dieses Problem zu lösen, wandte ich mich an bcrypt, das das Hashing von Passwörtern ermöglichte und die Sicherheit der registrierten Benutzer erheblich verbesserte. Die Einrichtung von bycrypt zum korrekten Hashing von Passwörtern erwies sich als schwierig. Glücklicherweise verfügt es jedoch über eine umfangreiche Dokumentation, auf die ich mich immer wieder beziehen konnte.",
    "para4": "Das Ergebnis war ein voll funktionsfähiges und sicheres Datenbanksystem. Die Backend-Infrastruktur ermöglichte die Speicherung und den Abruf von Film- und Benutzerdaten. Token-basierte Autorisierungs- und Authentifizierungsmechanismen sorgten für ein hohes Maß an Datensicherheit und gewährleisteten die Privatsphäre der Benutzer. Aufgrund der Komplexität der bei der Implementierung erforderlichen Schritte und um die Lesbarkeit und Wartbarkeit des Codes zu verbessern, fügte ich außerdem JSDoc-Kommentare hinzu, um eine umfassende Dokumentation der Codebasis zu erhalten.",
    "technologies": "JavaScript, Node.js, Express, MongoDB, Mongoose, Postman"
  },
  "project3": {
    "introText": "Die clientseitige Komponente der Movie API-Datenbank. Die Anwendung ist eine Single-Page-Applikation (SPA), die es den Nutzern ermöglicht, sich anzumelden, ihre Daten zu aktualisieren, Lieblingsfilme hinzuzufügen und zu entfernen sowie Filminformationen, einschließlich Genre und Regisseur, aus der bestehenden serverseitigen Movie API zu filtern und abzurufen. Sie wurde mit React und dem Build-Tool Parcel entwickelt und nutzt React Bootstrap als UI-Bibliothek für Styling und Responsivität.",
    "para1": "Ziel war es, eine benutzerfreundliche und funktionsreiche SPA zum Durchsuchen von Filmen mit React und React Bootstrap zu entwickeln. React wurde als Framework/Bibliothek gewählt, weil es für das Projekt geeignet ist, aber auch, um zu lernen - ich hatte React vor diesem Projekt noch nie benutzt.",
    "para2": "Ich habe damit begonnen, wichtige Komponenten und Endpunkte zu erstellen, um die Benutzerregistrierung, die Profilverwaltung und die Bearbeitung von Lieblingsfilmen zu ermöglichen. Dann habe ich die Funktionalität erweitert, indem ich Komponenten und Endpunkte integriert habe, die es den Nutzern ermöglichen, detaillierte Filminformationen, einschließlich Genres und Regisseure, von der bestehenden serverseitigen Movie API abzurufen. Anschließend habe ich Komponenten und Endpunkte implementiert, mit denen die Nutzer/innen Filme nach Titel filtern können, um das Sucherlebnis zu verbessern. Schließlich wendete ich das React Bootstrap-Styling an und sorgte für Responsivität, um die visuelle Attraktivität der Website und das Nutzererlebnis zu optimieren.",
    "para3": "Das Ergebnis dieser Bemühungen war eine voll funktionsfähige und reaktionsschnelle Website zum Durchsuchen von Filmen. Die Integration von React und React Bootstrap erfüllte nicht nur meine Erwartungen, sondern lieferte auch wertvolle praktische Erfahrungen bei der erfolgreichen Erstellung einer interaktiven und visuell ansprechenden Webplattform. Es war auch eine wertvolle Lernerfahrung, die es mir ermöglichte, Erfahrungen mit einem neuen Ansatz zur Erstellung von SPAs zu sammeln und den effektiven Einsatz von React und React Bootstrap zur Entwicklung einer funktionsreichen und responsiven Website zu demonstrieren.",
    "technologies": "React, React Bootstrap, JavaScript, Parcel, JSDoc"
  },
  "project4": {
    "introText": "Eine progressive Web-App (PWA), mit der du nach Orten suchen kannst, um zu sehen, welche Veranstaltungen in der jeweiligen Stadt stattfinden. Die Authentifizierung erfolgt über Google und erfordert daher ein Google-Konto. Die App kann auf dem Desktop oder Homescreen gespeichert werden, um den Zugriff zu erleichtern, und ermöglicht Offline-Funktionen",
    "para1": "Das Ziel dieses Projekts war die Beherrschung von JavaScript, um eine App zu erstellen, die effizient Daten von einer API abrufen und korrekt anzeigen kann. Eine der größten Hürden war das Schreiben von JavaScript-Versprechen, um Daten von der API abzurufen und gleichzeitig sicherzustellen, dass die zurückgegebenen Daten im richtigen Format waren. Das Erkennen und Beheben von Fehlern beim Abrufen der Daten stellte eine große Herausforderung dar. Außerdem stellte die Optimierung der App-Leistung, insbesondere bei der Bearbeitung von API-Anfragen, ein großes Hindernis dar.Die erste Aufgabe bestand darin, eine Schnittstelle zu entwickeln, die es den Nutzern ermöglicht, nach Ereignissen an einem bestimmten Ort zu suchen und dann Daten von einer Kalender-API abzurufen, um die App dynamisch zu aktualisieren. Die Implementierung einer sicheren Benutzerauthentifizierung, die Gewährleistung der Offline-Funktionalität und die einfache Installation auf Desktops und Smartphones waren ebenfalls wichtige Anforderungen. Das Projekt zielte auch auf robuste Tests durch einen testgetriebenen Entwicklungsansatz (TDD) während des gesamten Entwicklungsprozesses ab",
    "para2": "Um diese Herausforderungen zu meistern, habe ich die PWA unter Einbeziehung der Google API Services für den Abruf von Ereignisdaten und die Authentifizierung entwickelt. Das Frontend der App wurde mit React responsiv gestaltet, um Veranstaltungsdetails wie Startzeiten, Orte und Beschreibungen mit einer benutzerfreundlichen Umschaltfunktion darzustellen und zu verwalten. Mithilfe einer Visualisierungsbibliothek wurde ein grafisches Overlay implementiert, das die API-Daten in eine visuelle Aufschlüsselung der Veranstaltungsarten und -mengen an jedem Ort umwandelt. Anschließend wurden AWS-Zugangsdaten eingerichtet, um die serverlose Technologie zu implementieren und Lambda-Funktionen für die Backend-Funktionalität zu nutzen. So konnte die Benutzerauthentifizierung über Google OAuth2.0 integriert werden, für die ein Google-Konto erforderlich ist. Progressive Funktionen wurden zusammen mit Service Workern implementiert, damit die App direkt von Desktop- und Smartphone-Homescreens aus installiert und aufgerufen werden kann, auch wenn sie offline ist. Für umfassende Tests wurden testgetriebene Entwicklungstechniken (TDD) mit Jest, Cucumber und Puppeteer eingesetzt, wodurch eine robuste Abdeckungsrate von >=90% erreicht wurde. Kontinuierliche Integrationspipelines (CI) wurden für eine effiziente Bereitstellung und Aktualisierung eingerichtet.",
    "para3": "Das Ergebnis dieser Bemühungen war eine voll funktionsfähige und sichere progressive Web-App mit einer optisch ansprechenden und benutzerfreundlichen Oberfläche. Der nahtlose Datenabruf von der Google Calendar API und die einfache und sichere Authentifizierung sowie die einfache Installation und der Offline-Zugriff verbesserten das Nutzererlebnis zusätzlich. Strenge Testverfahren, einschließlich eines TDD-Ansatzes mit Jest, Cucumber und Puppeteer, trugen dazu bei, dass die korrekte Funktionalität in jeder Phase der Entwicklung gewährleistet war. Das Projekt war auch eine wertvolle Erfahrung für meine zukünftige Entwicklung, denn es ermöglichte mir, neben strengen Testmethoden und einem CI-Ansatz auch serverlose Funktionen zu implementieren",
    "technologies": "React, Bootstrap, JavaScript, AWS Lambda, Google API Services, Jest"
  },
  "project5": {
    "introText": "Eine WhatsApp-artige Chat-App für Mobilgeräte, mit der Benutzer einander in einem Chatroom Nachrichten senden können. Die Benutzer können ihren Namen und ihre Hintergrundfarbe auswählen und dann den Chatraum betreten, in dem sie Nachrichten senden, Fotos senden und aufnehmen, ihren Standort übermitteln und Sprachnachrichten aufnehmen und versenden können. Da es sich um eine native mobile App handelt, muss sie auf einem mobilen Gerät installiert und betrieben werden.",
    "para1": "Das Ziel war es, eine plattformübergreifende Chat-Anwendung mit React Native zu entwickeln, die sowohl mit Apple- als auch mit Android-Betriebssystemen kompatibel ist. Die App sollte ein nahtloses mobiles Erlebnis bieten und es den Nutzern ermöglichen, in Echtzeit zu chatten, Bilder auszutauschen, Standortdaten zu teilen und Sprachnachrichten aufzunehmen. Die Umsetzung von Funktionen wie Echtzeitkommunikation, Medienfreigabe und Authentifizierung bei gleichzeitiger Gewährleistung einer reibungslosen Funktionalität auf verschiedenen Geräten waren die Anforderungen dieses Projekts.",
    "para2": "Zunächst habe ich die Chat-App mit React Native entwickelt, um die Kompatibilität sowohl mit Apple- als auch mit Android-Plattformen zu gewährleisten. Dank meiner Vertrautheit mit React Native konnte ich schnell die grundlegende Struktur und Funktionalität der App aufbauen. Die App wurde kontinuierlich mit Expo als Simulator für das iPhone und Android Studio als Emulator getestet. Während sich Expo problemlos einrichten ließ, hatte ich mit Android Studio einige anfängliche Probleme. Durch eine Änderung der Konfiguration auf meinem Entwicklungsgerät wurden die meisten Probleme jedoch behoben. Die Chat-Oberfläche und -Funktionalität wurde mit der Gifted Chat-Bibliothek erstellt, so dass die Nutzer/innen die Möglichkeit haben, ihren Namen einzugeben und einen Hintergrund auszuwählen, um ihre Erfahrungen anzupassen. Die Kommunikation in Echtzeit wurde über Socket.IO ermöglicht, so dass die Nutzer/innen sofort chatten konnten. Die App war mit der Möglichkeit ausgestattet, Bilder aus der Bildbibliothek des Geräts zu versenden, Bilder mit der Kamera des Geräts aufzunehmen, Standortdaten über eine Kartenansicht zu teilen und Sprachnachrichten aufzuzeichnen. Die Benutzerauthentifizierung wurde anonym über Google Firestore abgewickelt, und Firebase wurde zur nahtlosen Verwaltung der Datenbank und des Cloud-Speichers verwendet. Ich stieß auf einige Probleme mit der Speicherung von Chat- und Mediennachrichten in Firebase und der Synchronisierung dieser Nachrichten mit verschiedenen Nutzern. Nachdem ich die Konfiguration und die ID korrekt implementiert hatte, war das Problem jedoch schnell gelöst.",
    "para3": "Das Ergebnis war eine vielseitige und benutzerfreundliche plattformübergreifende Chat-Anwendung. Die Nutzer konnten in Echtzeit interagieren, Bilder austauschen, Standortdaten teilen und mühelos Sprachnachrichten aufnehmen. Ich habe mir vorgenommen, das zu erreichen. Die Kompatibilität der App sowohl mit Apple- als auch mit Android-Geräten sorgte für eine breite Nutzerbasis. Die Integration von Socket.IO ermöglichte eine nahtlose Echtzeitkommunikation und verbesserte das Nutzererlebnis. Der Einsatz von Google Firestore für die anonyme Benutzerauthentifizierung und Firebase für die Verwaltung der Datenbank und des Cloud-Speichers vereinfachte die Backend-Prozesse der App. Insgesamt hat die Chat-App die Projektanforderungen erfolgreich erfüllt, mir ermöglicht, React Native und Firebase zu erlernen und den Nutzern eine ansprechende und interaktive Plattform für die Kommunikation und den Medienaustausch zu bieten.",
    "technologies": "React Native, Expo, Android Studio, Firebase"
  },
  "project6": {
    "introText": "Die clientseitige Anwendung zur Registrierung und Anzeige einer Filmdatenbank, die TypeScript und Angular verwendet und Angular Material für das Styling einsetzt. Typedoc wird verwendet, um die Codebasis zu kommentieren und zu dokumentieren.",
    "para1": "Das Ziel war es, eine alternative Version des MyFlix React-Clients zu entwickeln. Mithilfe von TypeScript und Angular sollte eine robuste und sichere Anwendung mit erweiterten Funktionen entstehen. Die Überwindung der Lernkurve, die mit der strukturierten Ordnerorganisation von Angular und der strengen Typisierung von TypeScript verbunden ist, war eine große Herausforderung. Die Einführung dieser Technologien war jedoch entscheidend, um die Robustheit und Sicherheit der Anwendung zu gewährleisten. Eine große Schwierigkeit war auch die Integration von Benutzerauthentifizierungsfunktionen, die es den Benutzern ermöglichen, sich anzumelden, ihre Daten zu aktualisieren, ihre Lieblingsfilme zu verwalten und detaillierte Filmdaten von der serverseitigen Movie API abzurufen.",
    "para2": "Um diese Aufgabe zu bewältigen, habe ich TypeScript und Angular verwendet, um die clientseitigen Komponenten zu erstellen. Angular Material wurde als UI-Bibliothek verwendet, um eine optisch ansprechende und reaktionsfähige Benutzeroberfläche zu schaffen. Typedoc wurde eingesetzt, um die Codebasis umfassend zu dokumentieren. Anfangs war es eine Herausforderung, mich mit dem strukturierten Ordnersystem von Angular und der strengen Typisierung von TypeScript vertraut zu machen, aber schließlich konnte ich sie nutzen und Schnittstellen definieren, um eine klare Datenstruktur innerhalb der Anwendung zu schaffen. Dieser Ansatz hat Bugs und Fehler im Code deutlich reduziert und die Robustheit der Anwendung insgesamt verbessert. Die Implementierung von Benutzerauthentifizierungsfunktionen wie Anmeldung, Profilaktualisierung und Verwaltung der Lieblingsfilme war ein wesentlicher Bestandteil des Entwicklungsprozesses, aber meine Vertrautheit mit der Movie API-Datenbank und dem vorherigen React-Client-Projekt hat dies sehr erleichtert.",
    "para3": "Das Endergebnis dieser Bemühungen war eine sichere, funktionsreiche Client-Anwendung. Durch die Überwindung der Lernkurve und die Einbeziehung des strukturierten Ansatzes von Angular und der strengen Typisierung von TypeScript erreichte die Anwendung ein hohes Maß an Robustheit und Sicherheit. Die Integration der Typedoc-Dokumentation sorgte für eine umfassende und leicht zugängliche Dokumentation der Codebasis und erleichterte die Wartung und zukünftige Entwicklung. Die mit Angular Material gestaltete Benutzeroberfläche der Anwendung bot ein optisch ansprechendes und reaktionsschnelles Erlebnis für die Benutzer. Insgesamt lieferte das Projekt erfolgreich eine clientseitige Komponente, die die Anforderungen erfüllte und den Nutzern ein nahtloses Filmblättererlebnis bot.",
    "technologies": "Angular, Angular Material, TypeScript, TypeDoc"
  },

  "toggleWork": {
    "hide": "Verbergen",
    "show": "Anzeigen"
  },
  "contactSection": {
    "title": "Kontaktiere mich",
    "text": "Du findest mich auf einem der unten stehenden Kanäle – lass uns loslegen!"
  }
}
