{
  "headerSection": {
    "line1": "Mein Name ist ",
    "line2": ", und diese Seite ",
    "line3": "ist mein personalisiertes Portfolio",
    "line4": "entwickelt mit ",
    "name": "Mark",
    "codeLang": "React"
  },
  "profileSection": {
    "line1": "Ich bin ein Full Stack Web Developer, der in Großbritannien geboren wurde, aber in Deutschland wohnt.",
    "line2": "Full-Stack-Webentwickler mit einem Hintergrund in digitaler Technologie und Entwicklung. Fähigkeiten in der Erstellung von Front-End- und Back-End-Apps, einschließlich Webseiten und sowohl webbasierten (WPA) als auch nativen Apps. Responsive, barrierefreie und benutzerfreundliche Designs, Entwicklung, Fehlersuche und Einführung. Ich freue mich darauf, die Zukunft der Webentwicklung und der Technologiebranche mitzugestalten."
  },
  "toggleSkills": {
    "hide": "Verbergen",
    "show": "Anzeigen"
  },
  "workTitle": {
    "title": "Meine Arbeit"
  },
  "projectLabels": {
    "introTitle": "Was ist das?",
    "processTitle": "der Entwicklungsprozess",
    "technologies": "Entwickelt mit: ",
    "visitSite": "Besuche die Seite: ",
    "visitRepo": "Besuche das Repository: "
  },
  "project1": {
    "introText": "Eine App, die die Seite dynamisch mit Pokemon-Daten aus einer API auffüllt. Die App ermöglicht es dir, die Liste nach einem Pokemon anhand seines Namens zu durchsuchen. Wenn du darauf klickst, erscheint ein modales Fenster mit dem Namen, dem Typ und einem Bild des Pokemons. Sie wurde mit JavaScript, HTML und CSS mit Bootstrap-Styling erstellt.",
    "para1": "Das Ziel dieses Projekts war die Beherrschung von JavaScript, um eine App zu erstellen, die effizient Daten von einer API abrufen und sie mit Hilfe von Bootstrap-Karten und Modals auf der Seite anzeigen kann. Die API-Daten waren im Json-Format gespeichert. Sie mussten also mit JavaScript-API-Aufrufen abgerufen und dann dem DOM hinzugefügt werden, indem die erforderlichen HTML-Elemente erstellt und angehängt wurden, um die Daten korrekt anzuzeigen.",
    "para2": "Ich startete diese Aufgabe, indem ich ein grundlegendes HTML-Layout anlegte, das ich später zum Einfügen der relevanten Elemente und API-Daten aus JavaScript verwenden konnte. Als nächstes begann ich mit der Arbeit an JavaScript-Versprechen, führte gründliche Tests durch und nutzte die Konsolenprotokollierung, um Probleme in den API-Aufrufen zu identifizieren. Durch diesen iterativen Ansatz konnte ich die Probleme effektiv beheben und die Daten erfolgreich aus der API abrufen. Sobald ich die benötigten Daten erfolgreich abrufen konnte, begann ich damit, die API-Daten in die Seite zu integrieren, indem ich die erforderlichen Bootstrap-Elemente und -Klassen anlegte und sie zusammen mit den Daten an die Seite anfügte. Nach einigen Tests und Änderungen am Code und Styling reichte dies aus, um die zu Beginn des Projekts aufgestellten Kriterien erfolgreich zu erfüllen. Ein Problem, das ich nur schwer lösen konnte, betraf die Leistung - es gab eine kleine, aber spürbare Verzögerung bei der Anzeige der Daten auf der Seite, die zum ersten Mal geladen wurde. Nachdem ich verschiedene Lösungen ausprobiert hatte, einschließlich der Anpassung von asynchronen Anfragen, stellte sich heraus, dass diese Verzögerung größtenteils unvermeidlich war (die Zeit, die benötigt wurde, um die Daten von der API abzurufen und sie auf die Seite zu laden). Um dieses Problem zu umgehen, fügte ich einen Ladebildschirm mit einem animierten Fortschrittsbalken hinzu, der beim Laden der Seite erschien und dann verschwand, nachdem die Pokémon-Daten erfolgreich geladen worden waren.",
    "para3": "Nachdem ich die Ziele des Projekts erreicht und seine Funktionalität überprüft hatte, machte ich mich daran, zusätzliche Features hinzuzufügen, die das Projekt meiner Meinung nach verbessern würden. Zunächst fügte ich mit Hilfe von Bootstrap-Formularklassen eine Suchleiste in den HTML-Code ein, mit der der Benutzer nach seinem Lieblings-Pokémon suchen kann. Damit dies funktioniert, habe ich eine Filtermethode im JavaScript verwendet, die nur die Pokémon anzeigt, die dem vom Benutzer eingegebenen Text entsprechen, und den Rest ausblendet. Außerdem fügte ich für jedes Pokémon eine Kartenfarbe auf der Grundlage seines Pokémon-Typs hinzu. Dazu musste ich zunächst auf die entsprechenden Json-Daten aus der API zugreifen und sie überprüfen und dann die passende Klassenfarbe zu dieser Karte hinzufügen, um jedem Typ eine eigene Farbe zu geben.",
    "para4": "Das Endergebnis dieser Bemühungen war die erfolgreiche Erstellung einer Pokémon-Datenbankanwendung, die fast vollständig in JavaScript geschrieben wurde. Das erfolgreiche Abrufen der Daten und die dynamische Anzeige auf der Seite reichten aus, um ein erfolgreiches Projekt anzulegen. Ich denke jedoch, dass die zusätzlichen Features der Suchnavigation und des Ladebildschirms die App zu einem viel benutzerfreundlicheren Produkt gemacht haben.",
    "technologies": "HTML, CSS, Bootstrap, JavaScript"
  },
  "project2": {
    "introText": "Die serverseitige Komponente einer Filmanwendung im IMDB-Stil. Sie enthält eine Datenbank mit Daten zu verschiedenen Filmen, wie z.B. das Genre, die Beschreibung, das Titelbild usw., Informationen über registrierte Benutzer (einschließlich Datensicherheitsmethoden) und Endpunkte, die eingerichtet wurden, um clientseitigen Anwendungen die Interaktion mit der Datenbank zu ermöglichen.",
    "para1": "Die Hauptanforderung bei diesem Projekt war der Aufbau einer Datenbank mit Filmen und den dazugehörigen Daten. Die Datenbank musste von clientseitigen Anwendungen aus zugänglich sein und CRUD-Operationen ermöglichen. Außerdem sollte die Datenbank clientseitigen Anwendungen ermöglichen, Daten über registrierte Benutzer zu speichern und abzurufen, damit diese sich registrieren und anmelden können.",
    "para2": "Ich startete, indem ich Node.js und Express verwendete, um die wesentlichen Anfragen und Endpunkte anzulegen, die die relevanten CRUD-Anfragen für die clientseitige Anwendung ermöglichen würden. Der nächste Schritt war die Erstellung der Datenbank. Hierfür wurde MongoDB aufgrund seiner Zuverlässigkeit und Leistung, aber auch wegen seiner Flexibilität als relationale Datenbank gewählt. Dies ermöglichte die Erstellung eines eigenen Schemas für das Projekt, das mit Mongoose angelegt wurde. Nachdem das Schema, die Endpunkte und Sammlungen in MongoDB eingerichtet waren, habe ich postman verwendet, um CRUD-Operationen der Datenbank über die angegebenen Endpunkte zu testen. Bei der Durchführung von CRUD-Operationen mit dem Benutzer fehlte jedoch noch eine Schlüsselkomponente - die Benutzerauthentifizierung und -validierung. Dies wurde durch JSON-Web-Token erledigt, die für jeden Benutzer ein Token generierten. Dies wiederum erforderte das Middleware-Paket Passport, das mit Express arbeitet, um Token zu validieren und Benutzer zu authentifizieren. Um die Funktionalität sicherzustellen, habe ich erneut postman verwendet, um die Endpunkte zu testen.",
    "para3": "Eine der wichtigsten Verbesserungen, die ich vornehmen wollte, stellte jedoch auch die größte Challenge dar - eine Verschlüsselungsmethode zur Verbesserung der Sicherheit bei der Authentifizierung und Autorisierung. Um dieses Problem zu lösen, wandte ich mich an bcrypt, das das Hashing von Passwörtern ermöglichte und die Sicherheit der registrierten Benutzer erheblich verbesserte. Die Einrichtung von bycrypt zum korrekten Hashing von Passwörtern erwies sich als schwierig. Glücklicherweise verfügt es jedoch über eine umfangreiche Dokumentation, auf die ich mich immer wieder beziehen konnte.",
    "para4": "Das Ergebnis war ein voll funktionsfähiges und sicheres Datenbanksystem. Die Backend-Infrastruktur ermöglichte die Speicherung und den Abruf von Film- und Benutzerdaten. Token-basierte Autorisierungs- und Authentifizierungsmechanismen sorgten für ein hohes Maß an Datensicherheit und gewährleisteten die Privatsphäre der Benutzer. Aufgrund der Komplexität der bei der Implementierung erforderlichen Schritte und um die Lesbarkeit und Wartbarkeit des Codes zu verbessern, fügte ich außerdem JSDoc-Kommentare hinzu, um eine umfassende Dokumentation der Codebasis zu erhalten.",
    "technologies": "JavaScript, Node.js, Express, MongoDB, Mongoose, Postman"
  },
  "project3": {
    "introText": "Die clientseitige Komponente einer Filmanwendung. Die Single-Page-Anwendung (SPA), mit der sich Benutzer anmelden, Filmdaten anzeigen und ihre Daten aktualisieren, suchen und Lieblingsfilme hinzufügen oder entfernen können.",
    "para1": "Das Ziel war die Entwicklung einer benutzerfreundlichen und mit vielen Features ausgestatteten SPA zum Durchsuchen von Filmen mit React und React Bootstrap. Die App sollte es Benutzern ermöglichen, sich zu registrieren und registrierte Benutzer sollten sich bei der App anmelden können. Nach der Anmeldung können die Benutzer eine Liste mit Informationen durchsuchen, auf einen Film klicken, um detailliertere Informationen zu erhalten, und zu einer Profilseite navigieren, auf der sie ihre Daten einsehen und aktualisieren sowie ihr Konto löschen können.",
    "para2": "React wurde für dieses Projekt ausgewählt, weil es den Ruf hat, eine reibungslose und reaktionsschnelle Leistung zu bieten, ein gut dokumentiertes und unterstütztes Framework/eine gut dokumentierte Bibliothek zu sein und über clientseitige Rendering-Fähigkeiten zu verfügen. Ich habe das Projekt mit Parcel als Build-Tool eingerichtet, da es einfach ist und viele Minifier und Optimierungen enthält, die es für kleine Projekte geeignet machen. Sobald das Projekt eingerichtet war, startete ich mit dem Anlegen der Hauptseitenkomponente, gefolgt von der Hauptkomponente für die Filmliste. Ich richtete die erforderliche Logik ein, um die Filme aus der Datenbank zu holen und sie in die Komponente und dann in die detaillierte Filmkomponente einzuspeisen. React Bootstrap-Kartenklassen wurden verwendet, um die Daten anzuzeigen und ihnen ein grundlegendes Styling zu geben. Sobald dies abgeschlossen war, habe ich die Komponenten für die Anmeldung und die Benutzerregistrierung angelegt. React Router wurde verwendet, um sicherzustellen, dass Besucher ohne gültiges Token auf diese Willkommensseite umgeleitet werden. React Bootstrap-Formulare wurden verwendet, um Benutzereingaben zu ermöglichen, und dann wurde die Logik zum Senden und Abrufen der entsprechenden CRUD-Operation an die Movie API-Datenbank angelegt. Das abgerufene Token wird im Browser gespeichert, so dass sich der Benutzer anmelden kann. Die letzte wichtige Komponente war die Profilseite. Sie enthielt eine Anzeige für die Benutzerdaten, ein Formular zur Aktualisierung der Benutzerdaten und eine Schaltfläche zum Löschen des Kontos. Die Implementierung dieses Formulars zur Aktualisierung der Benutzerdaten war vielleicht die größte Herausforderung bei diesem Projekt. Die Aktualisierung und Verschlüsselung der an den Server gesendeten Daten und die Rückgabe und Aktualisierung der Benutzerdaten auf derselben Seite erwiesen sich als schwierig. Ich fand es jedoch einfacher, dieses Problem zu lösen, indem ich die Seite in mehrere Unterkomponenten aufteilte, um die Daten des Benutzers und das Formular zur Aktualisierung des Benutzers anzuzeigen. Auf diese Weise konnte ich die neuen Daten über Props übergeben, was die Probleme mit der Aktualisierung der Benutzerinformationen fast nahtlos löste.",
    "para3": "Nachdem ich die wesentlichen Komponenten fertiggestellt und die Funktionalität getestet hatte, beschloss ich, einige zusätzliche Verbesserungen vorzunehmen, um das Projekt zu erweitern. Die erste bestand darin, die Benutzerfreundlichkeit und die Sicherheit zu verbessern, indem ich die Formulare mit einer Validierungslogik versah, um Skripting-Angriffe zu verhindern und dem Benutzer bei ungültigen Eingaben eine Rückmeldung zu geben. Weitere Verbesserungen der Benutzerfreundlichkeit wurden durch die Verwendung von React Bootstrap-Warnungen erzielt, die mit entsprechenden Fehlermeldungen aktualisiert werden. Außerdem fügte ich der Profilseite eine Favoritenliste hinzu, indem ich der Liste der Filme eine Favoriten-Schaltfläche hinzufügte. Sobald ein Benutzer auf die Schaltfläche Favorit klickt, wird der Film zu einer neuen Liste hinzugefügt, die im Profilbereich in einer neuen Unterkomponente angezeigt wird. Sie können den Film auch wieder aus der Liste entfernen, indem Sie auf dieselbe Schaltfläche klicken. Und schließlich habe ich, obwohl React Bootstrap ohne eigenes Styling geliefert wurde, angepasste CSS-Stylings hinzugefügt, um der App ein modernes und einzigartiges Aussehen zu verleihen.",
    "para4": "Das Endprodukt war eine zufriedenstellende Integration von React und React Bootstrap, die nicht nur die Projekterwartungen erfüllte, sondern auch wertvolle Erfahrungen bei der erfolgreichen Erstellung einer interaktiven, reaktionsfähigen und visuell ansprechenden Webplattform in Kombination mit aktuellen Verschlüsselungs- und Sicherheitsstandards lieferte.",
    "technologies": "React, React Bootstrap, JavaScript, Parcel, JSDoc"
  },
  "project4": {
    "introText": "Eine progressive Web-App (PWA), mit der Sie nach Orten suchen können, um zu sehen, welche Veranstaltungen in der jeweiligen Stadt stattfinden. Die Authentifizierung erfolgt über Google und erfordert daher ein Google-Konto. Die App kann auf dem Desktop oder dem Homescreen gespeichert werden, um den Zugriff zu erleichtern, und ermöglicht Offline-Funktionalität.",
    "para1": "Ziel dieses Projekts war es, eine progressive Web-App (PWA) anzulegen, auf die sowohl online über das Internet zugegriffen werden kann als auch als Web-App auf dem Desktop oder dem Smartphone-Homescreen gespeichert werden kann. Als PWA würde die App schnelles Laden, Offline-Funktionalität und plattformübergreifende Funktionalität bieten. Der Zugriff auf die App würde über Google OAuth2.0 erfolgen. Auf der App-Hauptseite können Benutzer nach einer Liste von Städten suchen. Eine API-Anfrage ruft eine Liste von Veranstaltungen an diesem Ort ab und zeigt sie auf der Seite an. Die Anzeige würde die Daten in Listenform anzeigen und weitere Details aus einem Dropdown-Menü anzeigen, wenn Sie darauf klicken. Außerdem würden bei diesem Projekt kontinuierliche Tests durchgeführt, um einen automatisierten und konsistenten Code zu gewährleisten.",
    "para2": "Ich begann mit dem Frontend der App und verwendete erneut React und React Bootstrap aufgrund seiner Einfachheit und seiner Fähigkeit, responsive SPAs zu erstellen. Die ersten Komponenten wurden so eingerichtet, dass sie mit Hilfe eines Eingabeformulars nach Städten suchen und Veranstaltungsdetails wie Startzeiten, Orte und Beschreibungen anzeigen. Ein benutzerfreundliches Feature ermöglicht es, weitere Daten zur Veranstaltung anzuzeigen. Mit Hilfe von Dummy-Daten, die zu Testzwecken erstellt wurden, konnte ich dann Daten in die App einspeisen, um sicherzustellen, dass sie korrekt angezeigt wurden. Nachdem ich die Grundstruktur der App eingerichtet hatte, begann ich nach der Technik der testgetriebenen Entwicklung (TDD) mit dem Schreiben von Unit-Tests, gefolgt von Integrationstests, um sicherzustellen, dass die Teile einzeln und zusammen funktionieren. Als Testsuite wurde JEST gewählt, da sie gut dokumentiert ist und für beide Testansätze verwendet werden kann. Dann begann ich mit dem Schreiben von Akzeptanztests mit Cucumber und der Implementierung der entsprechenden Features und anschließend mit End-to-End-Tests mit Puppeteer. Ich fand es eine ziemliche Herausforderung, sicherzustellen, dass alle Tests korrekt bestanden, da das Schreiben des Tests und die anschließende Implementierung des korrekten Codes, damit der Test erfolgreich war, ziemlich zeitaufwändig war. Die Verwendung von Online-Ressourcen wie Spickzetteln half mir jedoch enorm, diesen Prozess zu beschleunigen und sicherzustellen, dass meine Tests korrekt geschrieben waren. Nachdem ich sichergestellt hatte, dass alle Tests mit den Dummy-Daten erfolgreich waren, begann ich mit der Arbeit an den Backend-Anfragen, um die API-Daten von der Google Calendar API zu erhalten. Anstatt eine traditionelle Serverarchitektur zu verwenden, wurden Serverless Lambda-Funktionen, die von AWS gehostet werden, aufgrund ihrer Verfügbarkeit und geringen/keinen Wartungsaufwand verwendet. Diese wurde mit Google Services verbunden, um die Authentifizierung über Google OAuth2.0 zu ermöglichen. Auf diese Weise konnte sich ein Benutzer über Google anmelden und die relevanten Ereignisse aus der Google Calendar API abrufen. Nachdem ich sichergestellt hatte, dass alle Tests erfolgreich verliefen, konnte ich mit der Implementierung der Offline-Funktionalität und dem Speichern auf dem Desktop/Home-Screen mithilfe von Service Workern beginnen.",
    "para3": "Obwohl die App alle Tests bestand und alle angestrebten Funktionen erfüllte, hatte ich immer noch das Gefühl, dass sie nicht so optisch attraktiv war, wie sie sein könnte. Um dieses Problem zu lösen, wurde ein grafisches Overlay mit einer Visualisierungsbibliothek implementiert, um die API-Daten in eine visuelle Aufschlüsselung der Ereignistypen und -mengen an jedem Ort umzuwandeln, zusätzlich zur bereits implementierten Listenansicht. Dadurch wurde die App bunter und visuell interessanter. Zusammen mit einem angepassten Styling sah die App viel ansprechender aus. Das zusätzliche grafische Overlay musste dann in die Tests integriert werden, um sicherzustellen, dass es auch wirklich wie vorgesehen funktionierte. Der letzte Schritt war die Verwendung der Google Lighthouse PWA-Checkliste und eines Online-Performance-Tools, um sicherzustellen, dass die App wie erwartet funktionierte.",
    "para4": "Das Endprodukt war eine optisch ansprechende und reaktionsschnelle PWA mit sofortigem Laden, Offline-Unterstützung, Push-Benachrichtigungen, der Aufforderung 'zum Homescreen hinzufügen' und plattformübergreifender Kompatibilität. Die serverlose Funktion ermöglichte eine einfache, wartungsarme Backend-Option und der TDD-Ansatz führte dazu, dass alle Fehler während des Build-Prozesses erkannt und beseitigt wurden.",
    "technologies": "React, Bootstrap, JavaScript, AWS Lambda, Google API Services, Jest"
  },
  "project5": {
    "introText": "Eine WhatsApp-artige Chat-App für Mobilgeräte, mit der Benutzer einander in einem Chatroom Nachrichten senden können. Die Benutzer können ihren Namen und ihre Hintergrundfarbe auswählen und dann den Chatraum betreten, in dem sie Nachrichten senden, Fotos senden und aufnehmen, ihren Standort übermitteln und Sprachnachrichten aufnehmen und versenden können. Da es sich um eine native mobile App handelt, muss sie auf einem mobilen Gerät installiert und betrieben werden.",
    "para1": "Das Ziel war es, eine plattformübergreifende Chat-Anwendung mit React Native zu entwickeln, die sowohl mit Apple- als auch mit Android-Betriebssystemen kompatibel ist. Die App sollte ein nahtloses mobiles Erlebnis bieten und es den Nutzern ermöglichen, in Echtzeit zu chatten, Bilder auszutauschen, Standortdaten zu teilen und Sprachnachrichten aufzunehmen. Die Umsetzung von Funktionen wie Echtzeitkommunikation, Medienfreigabe und Authentifizierung bei gleichzeitiger Gewährleistung einer reibungslosen Funktionalität auf verschiedenen Geräten waren die Anforderungen dieses Projekts.",
    "para2": "Zunächst habe ich die Chat-App mit React Native entwickelt, um die Kompatibilität sowohl mit Apple- als auch mit Android-Plattformen zu gewährleisten. Dank meiner Vertrautheit mit React Native konnte ich schnell die grundlegende Struktur und Funktionalität der App aufbauen. Die App wurde kontinuierlich mit Expo als Simulator für das iPhone und Android Studio als Emulator getestet. Während sich Expo problemlos einrichten ließ, hatte ich mit Android Studio einige anfängliche Probleme. Durch eine Änderung der Konfiguration auf meinem Entwicklungsgerät wurden die meisten Probleme jedoch behoben. Die Chat-Oberfläche und -Funktionalität wurde mit der Gifted Chat-Bibliothek erstellt, so dass die Nutzer/innen die Möglichkeit haben, ihren Namen einzugeben und einen Hintergrund auszuwählen, um ihre Erfahrungen anzupassen. Die Kommunikation in Echtzeit wurde über Socket.IO ermöglicht, so dass die Nutzer/innen sofort chatten konnten. Die App war mit der Möglichkeit ausgestattet, Bilder aus der Bildbibliothek des Geräts zu versenden, Bilder mit der Kamera des Geräts aufzunehmen, Standortdaten über eine Kartenansicht zu teilen und Sprachnachrichten aufzuzeichnen. Die Benutzerauthentifizierung wurde anonym über Google Firestore abgewickelt, und Firebase wurde zur nahtlosen Verwaltung der Datenbank und des Cloud-Speichers verwendet. Ich stieß auf einige Probleme mit der Speicherung von Chat- und Mediennachrichten in Firebase und der Synchronisierung dieser Nachrichten mit verschiedenen Nutzern. Nachdem ich die Konfiguration und die ID korrekt implementiert hatte, war das Problem jedoch schnell gelöst.",
    "para3": "Das Ergebnis war eine vielseitige und benutzerfreundliche plattformübergreifende Chat-Anwendung. Die Nutzer konnten in Echtzeit interagieren, Bilder austauschen, Standortdaten teilen und mühelos Sprachnachrichten aufnehmen. Ich habe mir vorgenommen, das zu erreichen. Die Kompatibilität der App sowohl mit Apple- als auch mit Android-Geräten sorgte für eine breite Nutzerbasis. Die Integration von Socket.IO ermöglichte eine nahtlose Echtzeitkommunikation und verbesserte das Nutzererlebnis. Der Einsatz von Google Firestore für die anonyme Benutzerauthentifizierung und Firebase für die Verwaltung der Datenbank und des Cloud-Speichers vereinfachte die Backend-Prozesse der App. Insgesamt hat die Chat-App die Projektanforderungen erfolgreich erfüllt, mir ermöglicht, React Native und Firebase zu erlernen und den Nutzern eine ansprechende und interaktive Plattform für die Kommunikation und den Medienaustausch zu bieten.",
    "technologies": "React Native, Expo, Android Studio, Firebase"
  },
  "project6": {
    "introText": "Die clientseitige Anwendung zur Registrierung und Anzeige einer Filmdatenbank, die TypeScript und Angular verwendet und Angular Material für das Styling einsetzt. Typedoc wird verwendet, um die Codebasis zu kommentieren und zu dokumentieren.",
    "para1": "Das Ziel war es, eine alternative Version des MyFlix React-Clients zu entwickeln. Mithilfe von TypeScript und Angular sollte eine robuste und sichere Anwendung mit erweiterten Funktionen entstehen. Die Überwindung der Lernkurve, die mit der strukturierten Ordnerorganisation von Angular und der strengen Typisierung von TypeScript verbunden ist, war eine große Herausforderung. Die Einführung dieser Technologien war jedoch entscheidend, um die Robustheit und Sicherheit der Anwendung zu gewährleisten. Eine große Schwierigkeit war auch die Integration von Benutzerauthentifizierungsfunktionen, die es den Benutzern ermöglichen, sich anzumelden, ihre Daten zu aktualisieren, ihre Lieblingsfilme zu verwalten und detaillierte Filmdaten von der serverseitigen Movie API abzurufen.",
    "para2": "Um diese Aufgabe zu bewältigen, habe ich TypeScript und Angular verwendet, um die clientseitigen Komponenten zu erstellen. Angular Material wurde als UI-Bibliothek verwendet, um eine optisch ansprechende und reaktionsfähige Benutzeroberfläche zu schaffen. Typedoc wurde eingesetzt, um die Codebasis umfassend zu dokumentieren. Anfangs war es eine Herausforderung, mich mit dem strukturierten Ordnersystem von Angular und der strengen Typisierung von TypeScript vertraut zu machen, aber schließlich konnte ich sie nutzen und Schnittstellen definieren, um eine klare Datenstruktur innerhalb der Anwendung zu schaffen. Dieser Ansatz hat Bugs und Fehler im Code deutlich reduziert und die Robustheit der Anwendung insgesamt verbessert. Die Implementierung von Benutzerauthentifizierungsfunktionen wie Anmeldung, Profilaktualisierung und Verwaltung der Lieblingsfilme war ein wesentlicher Bestandteil des Entwicklungsprozesses, aber meine Vertrautheit mit der Movie API-Datenbank und dem vorherigen React-Client-Projekt hat dies sehr erleichtert.",
    "para3": "Das Endergebnis dieser Bemühungen war eine sichere, funktionsreiche Client-Anwendung. Durch die Überwindung der Lernkurve und die Einbeziehung des strukturierten Ansatzes von Angular und der strengen Typisierung von TypeScript erreichte die Anwendung ein hohes Maß an Robustheit und Sicherheit. Die Integration der Typedoc-Dokumentation sorgte für eine umfassende und leicht zugängliche Dokumentation der Codebasis und erleichterte die Wartung und zukünftige Entwicklung. Die mit Angular Material gestaltete Benutzeroberfläche der Anwendung bot ein optisch ansprechendes und reaktionsschnelles Erlebnis für die Benutzer. Insgesamt lieferte das Projekt erfolgreich eine clientseitige Komponente, die die Anforderungen erfüllte und den Nutzern ein nahtloses Filmblättererlebnis bot.",
    "technologies": "Angular, Angular Material, TypeScript, TypeDoc"
  },

  "toggleWork": {
    "hide": "Verbergen",
    "show": "Anzeigen"
  },
  "contactSection": {
    "title": "Kontaktiere mich",
    "text": "Du findest mich auf einem der unten stehenden Kanäle – lass uns loslegen!"
  }
}
