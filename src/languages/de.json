{
  "headerSection": {
    "line1": "Mein Name ist ",
    "line2": ", und diese Seite ",
    "line3": "ist mein personalisiertes Portfolio",
    "line4": "entwickelt mit ",
    "name": "Mark",
    "codeLang": "React"
  },
  "profileSection": {
    "line1": "Ich bin ein Full Stack Web Developer, der in Großbritannien geboren wurde, aber in Deutschland wohnt.",
    "line2": "Full-Stack-Webentwickler mit einem Hintergrund in digitaler Technologie und Entwicklung. Fähigkeiten in der Erstellung von Front-End- und Back-End-Apps, einschließlich Webseiten und sowohl webbasierten (WPA) als auch nativen Apps. Responsive, barrierefreie und benutzerfreundliche Designs, Entwicklung, Fehlersuche und Einführung. Ich freue mich darauf, die Zukunft der Webentwicklung und der Technologiebranche mitzugestalten."
  },
  "toggleSkills": {
    "hide": "Verbergen",
    "show": "Anzeigen"
  },
  "workTitle": {
    "title": "Meine Arbeit"
  },
  "projectLabels": {
    "introTitle": "Was ist das?",
    "processTitle": "der Entwicklungsprozess",
    "technologies": "Entwickelt mit: ",
    "visitSite": "Besuche die Seite: ",
    "visitRepo": "Besuche das Repository: "
  },
  "project1": {
    "introText": "Eine App, die die Seite dynamisch mit Pokemon-Daten aus einer API auffüllt. Die App ermöglicht es dir, die Liste nach einem Pokemon anhand seines Namens zu durchsuchen. Wenn du darauf klickst, erscheint ein modales Fenster mit dem Namen, dem Typ und einem Bild des Pokemons. Sie wurde mit JavaScript, HTML und CSS mit Bootstrap-Styling erstellt.",
    "para1": "Das Ziel dieses Projekts war es, JavaScript zu beherrschen, um eine App zu erstellen, die effizient Daten von einer API abrufen und korrekt anzeigen kann. Eine der größten Hürden war das Schreiben von JavaScript-Promises, um Daten von der API abzurufen und gleichzeitig sicherzustellen, dass die zurückgegebenen Daten im richtigen Format waren. Das Erkennen und Beheben von Fehlern beim Abrufen der Daten stellte eine große Herausforderung dar.",
    "para2": "Außerdem stellte die Optimierung der Leistung der App, insbesondere bei der Bearbeitung von API-Anfragen, ein großes Hindernis dar. Nachdem ich das Basis-HTML-Layout erstellt hatte, begann ich mit der Arbeit an den JavaScript-Versprechen, führte gründliche Tests durch und nutzte die Konsolenprotokollierung, um Probleme bei den API-Aufrufen zu erkennen. Durch diesen iterativen Ansatz war ich in der Lage, Probleme effektiv zu beheben und die Daten erfolgreich aus der API zu ziehen. Ich habe meine Fähigkeiten weiter ausgebaut, indem ich Bootstrap eingesetzt habe, um die App zu gestalten und sie responsiv zu machen. Die Integration der API-Daten sowohl in die Hauptseite als auch in die Bootstrap-Modalbox war ein entscheidender Schritt, um alles unter einen Hut zu bringen. Um die langsame Leistung, die durch API-Anfragen verursacht wird, zu verbessern, entschied ich mich, die einzelnen Pokémon-Bilder durch ein statisches Pokémon-Ball-Bild zu ersetzen. Dies ging zwar zu Lasten der Ästhetik, verbesserte aber die Geschwindigkeit und Reaktionsfähigkeit der App erheblich.",
    "para3": "Das Endergebnis dieser Bemühungen war die erfolgreiche Erstellung einer Pokémon-Datenbankanwendung. Trotz der Herausforderungen habe ich mein Ziel erreicht, ein funktionales Tool zu entwickeln, mit dem die Nutzer ihre Lieblings-Pokémon finden können. Bei diesem Projekt habe ich nicht nur meine JavaScript-Kenntnisse verbessert, sondern auch wertvolle Erfahrungen in den Bereichen API-Integration, Fehlerbehandlung und Leistungsoptimierung gesammelt. Obwohl ich einige ästhetische Kompromisse eingehen musste, um eine optimale Funktionalität zu gewährleisten, hat das Endprodukt seinen Zweck erfüllt und bietet den Nutzern eine praktische und effiziente Möglichkeit, ihre Lieblings-Pokémon zu erkunden und zu entdecken.",
    "technologies": "HTML, CSS, Bootstrap, JavaScript"
  },
  "project2": {
    "introText": "Die serverseitige Komponente einer Kinoanwendung. Die Webseite wird über Heroku gehostet und mit Node.js, Express und einer REST-Architektur erstellt. Die Geschäftslogik wird mit Mongoose modelliert und die Datenbank mit MongoDB aufgebaut. Die API wird mit Postman getestet und umfasst eine tokenbasierte Autorisierung und Authentifizierung. JSdoc wird verwendet, um die Codebasis zu kommentieren und zu dokumentieren. Die Datenbank selbst enthält Informationen über Filme und Benutzer und ermöglicht grundlegende CRUD-Operationen über die angegebenen Endpunkte.",
    "para1": "Das Ziel beim Aufbau dieser Datenbank war es, eine sichere und effiziente Kommunikation zwischen den Frontend- und Backend-Komponenten herzustellen. Die erste Herausforderung war die Implementierung einer Token-basierten Autorisierung und Authentifizierung, um die Sicherheit der Nutzerdaten zu gewährleisten. Dazu gehörten Aufgaben wie das Hashing von Passwörtern und die Erstellung von Token, die für uns Neuland darstellten. Außerdem stellte die Entwicklung einer Middleware-Funktion zur Überprüfung und Authentifizierung von Benutzer-Tokens eine große Herausforderung dar.",
    "para2": "Ich begann mit Node.js und Express, um die wichtigsten Anfragen und Endpunkte zu erstellen. Danach habe ich die Datenbank in MongoDB aufgebaut und damit die Grundlage für die Datenspeicherung geschaffen. Die Verbindung der Endpunkte mit der Datenbank erforderte viel Liebe zum Detail, um sicherzustellen, dass die richtigen Informationen abgerufen werden können. Um die Herausforderung der Authentifizierung zu meistern, habe ich die Pakete bcrypt und jsonwebtoken integriert, die das Hashing von Passwörtern und die Generierung von Token für jeden Nutzer ermöglichen. Die Entwicklung einer Middleware-Funktion zur Validierung der Token und zur Authentifizierung der Nutzer/innen erforderte einen hohen Aufwand, aber ich habe diese wichtige Sicherheitsmaßnahme erfolgreich umgesetzt. Um die Lesbarkeit und Wartbarkeit des Codes zu verbessern, habe ich JSDoc-Kommentare hinzugefügt, die eine umfassende Dokumentation der Codebasis ermöglichen.",
    "para3": "Das Ergebnis war ein voll funktionsfähiges und sicheres Datenbanksystem. Durch die Bewältigung der Herausforderungen habe ich eine robuste Backend-Infrastruktur geschaffen, die die Speicherung und den Abruf von Film- und Benutzerinformationen ermöglicht. Token-basierte Autorisierungs- und Authentifizierungsmechanismen sorgten für ein hohes Maß an Datensicherheit und gewährleisteten die Privatsphäre der Nutzer. Durch die Implementierung von JSDoc-Kommentaren wurde die Übersichtlichkeit und Zugänglichkeit der Codebasis verbessert. Dieses Projekt lieferte nicht nur eine funktionsfähige Datenbank, sondern auch wertvolle Einblicke in die sichere API-Entwicklung und Dokumentationspraktiken, was es zu einer wichtigen Lernerfahrung machte.",
    "technologies": "Node.js, Express, MongoDB"
  },
  "project3": {
    "introText": "Die clientseitige Komponente der Movie API-Datenbank. Die Anwendung ist eine Single-Page-Applikation (SPA), die es den Nutzern ermöglicht, sich anzumelden, ihre Daten zu aktualisieren, Lieblingsfilme hinzuzufügen und zu entfernen sowie Filminformationen, einschließlich Genre und Regisseur, aus der bestehenden serverseitigen Movie API zu filtern und abzurufen. Sie wurde mit React und dem Build-Tool Parcel entwickelt und nutzt React Bootstrap als UI-Bibliothek für Styling und Responsivität.",
    "para1": "Ziel war es, eine benutzerfreundliche und funktionsreiche SPA zum Durchsuchen von Filmen mit React und React Bootstrap zu entwickeln. React wurde als Framework/Bibliothek gewählt, weil es für das Projekt geeignet ist, aber auch, um zu lernen - ich hatte React vor diesem Projekt noch nie benutzt.",
    "para2": "Ich habe damit begonnen, wichtige Komponenten und Endpunkte zu erstellen, um die Benutzerregistrierung, die Profilverwaltung und die Bearbeitung von Lieblingsfilmen zu ermöglichen. Dann habe ich die Funktionalität erweitert, indem ich Komponenten und Endpunkte integriert habe, die es den Nutzern ermöglichen, detaillierte Filminformationen, einschließlich Genres und Regisseure, von der bestehenden serverseitigen Movie API abzurufen. Anschließend habe ich Komponenten und Endpunkte implementiert, mit denen die Nutzer/innen Filme nach Titel filtern können, um das Sucherlebnis zu verbessern. Schließlich wendete ich das React Bootstrap-Styling an und sorgte für Responsivität, um die visuelle Attraktivität der Website und das Nutzererlebnis zu optimieren.",
    "para3": "Das Ergebnis dieser Bemühungen war eine voll funktionsfähige und reaktionsschnelle Website zum Durchsuchen von Filmen. Die Integration von React und React Bootstrap erfüllte nicht nur meine Erwartungen, sondern lieferte auch wertvolle praktische Erfahrungen bei der erfolgreichen Erstellung einer interaktiven und visuell ansprechenden Webplattform. Es war auch eine wertvolle Lernerfahrung, die es mir ermöglichte, Erfahrungen mit einem neuen Ansatz zur Erstellung von SPAs zu sammeln und den effektiven Einsatz von React und React Bootstrap zur Entwicklung einer funktionsreichen und responsiven Website zu demonstrieren.",
    "technologies": "React, React Bootstrap, JavaScript, Parcel, JSDoc"
  },
  "project4": {
    "introText": "Eine progressive Web-App (PWA), mit der du nach Orten suchen kannst, um zu sehen, welche Veranstaltungen in der jeweiligen Stadt stattfinden. Die Authentifizierung erfolgt über Google und erfordert daher ein Google-Konto. Die App kann auf dem Desktop oder Homescreen gespeichert werden, um den Zugriff zu erleichtern, und ermöglicht Offline-Funktionen",
    "para1": "Das Ziel dieses Projekts war die Beherrschung von JavaScript, um eine App zu erstellen, die effizient Daten von einer API abrufen und korrekt anzeigen kann. Eine der größten Hürden war das Schreiben von JavaScript-Versprechen, um Daten von der API abzurufen und gleichzeitig sicherzustellen, dass die zurückgegebenen Daten im richtigen Format waren. Das Erkennen und Beheben von Fehlern beim Abrufen der Daten stellte eine große Herausforderung dar. Außerdem stellte die Optimierung der App-Leistung, insbesondere bei der Bearbeitung von API-Anfragen, ein großes Hindernis dar.Die erste Aufgabe bestand darin, eine Schnittstelle zu entwickeln, die es den Nutzern ermöglicht, nach Ereignissen an einem bestimmten Ort zu suchen und dann Daten von einer Kalender-API abzurufen, um die App dynamisch zu aktualisieren. Die Implementierung einer sicheren Benutzerauthentifizierung, die Gewährleistung der Offline-Funktionalität und die einfache Installation auf Desktops und Smartphones waren ebenfalls wichtige Anforderungen. Das Projekt zielte auch auf robuste Tests durch einen testgetriebenen Entwicklungsansatz (TDD) während des gesamten Entwicklungsprozesses ab",
    "para2": "Um diese Herausforderungen zu meistern, habe ich die PWA unter Einbeziehung der Google API Services für den Abruf von Ereignisdaten und die Authentifizierung entwickelt. Das Frontend der App wurde mit React responsiv gestaltet, um Veranstaltungsdetails wie Startzeiten, Orte und Beschreibungen mit einer benutzerfreundlichen Umschaltfunktion darzustellen und zu verwalten. Mithilfe einer Visualisierungsbibliothek wurde ein grafisches Overlay implementiert, das die API-Daten in eine visuelle Aufschlüsselung der Veranstaltungsarten und -mengen an jedem Ort umwandelt. Anschließend wurden AWS-Zugangsdaten eingerichtet, um die serverlose Technologie zu implementieren und Lambda-Funktionen für die Backend-Funktionalität zu nutzen. So konnte die Benutzerauthentifizierung über Google OAuth2.0 integriert werden, für die ein Google-Konto erforderlich ist. Progressive Funktionen wurden zusammen mit Service Workern implementiert, damit die App direkt von Desktop- und Smartphone-Homescreens aus installiert und aufgerufen werden kann, auch wenn sie offline ist. Für umfassende Tests wurden testgetriebene Entwicklungstechniken (TDD) mit Jest, Cucumber und Puppeteer eingesetzt, wodurch eine robuste Abdeckungsrate von >=90% erreicht wurde. Kontinuierliche Integrationspipelines (CI) wurden für eine effiziente Bereitstellung und Aktualisierung eingerichtet.",
    "para3": "Das Ergebnis dieser Bemühungen war eine voll funktionsfähige und sichere progressive Web-App mit einer optisch ansprechenden und benutzerfreundlichen Oberfläche. Der nahtlose Datenabruf von der Google Calendar API und die einfache und sichere Authentifizierung sowie die einfache Installation und der Offline-Zugriff verbesserten das Nutzererlebnis zusätzlich. Strenge Testverfahren, einschließlich eines TDD-Ansatzes mit Jest, Cucumber und Puppeteer, trugen dazu bei, dass die korrekte Funktionalität in jeder Phase der Entwicklung gewährleistet war. Das Projekt war auch eine wertvolle Erfahrung für meine zukünftige Entwicklung, denn es ermöglichte mir, neben strengen Testmethoden und einem CI-Ansatz auch serverlose Funktionen zu implementieren",
    "technologies": "React, Bootstrap, JavaScript, AWS Lambda, Google API Services, Jest"
  },
  "project5": {
    "introText": "Eine Chat-App, die mit React Native, Expo und Firebase gebaut wurde.",
    "para1": "Das Ziel war es, eine plattformübergreifende Chat-Anwendung mit React Native zu entwickeln, die sowohl mit Apple- als auch mit Android-Betriebssystemen kompatibel ist. Die App sollte ein nahtloses mobiles Erlebnis bieten und es den Nutzern ermöglichen, in Echtzeit zu chatten, Bilder auszutauschen, Standortdaten zu teilen und Sprachnachrichten aufzunehmen. Die Umsetzung von Funktionen wie Echtzeitkommunikation, Medienfreigabe und Authentifizierung bei gleichzeitiger Gewährleistung einer reibungslosen Funktionalität auf verschiedenen Geräten waren die Anforderungen dieses Projekts.",
    "para2": "Zunächst habe ich die Chat-App mit React Native entwickelt, um die Kompatibilität sowohl mit Apple- als auch mit Android-Plattformen zu gewährleisten. Dank meiner Vertrautheit mit React Native konnte ich schnell die grundlegende Struktur und Funktionalität der App aufbauen. Die App wurde kontinuierlich mit Expo als Simulator für das iPhone und Android Studio als Emulator getestet. Während sich Expo problemlos einrichten ließ, hatte ich mit Android Studio einige anfängliche Probleme. Durch eine Änderung der Konfiguration auf meinem Entwicklungsgerät wurden die meisten Probleme jedoch behoben. Die Chat-Oberfläche und -Funktionalität wurde mit der Gifted Chat-Bibliothek erstellt, so dass die Nutzer/innen die Möglichkeit haben, ihren Namen einzugeben und einen Hintergrund auszuwählen, um ihre Erfahrungen anzupassen. Die Kommunikation in Echtzeit wurde über Socket.IO ermöglicht, so dass die Nutzer/innen sofort chatten konnten. Die App war mit der Möglichkeit ausgestattet, Bilder aus der Bildbibliothek des Geräts zu versenden, Bilder mit der Kamera des Geräts aufzunehmen, Standortdaten über eine Kartenansicht zu teilen und Sprachnachrichten aufzuzeichnen. Die Benutzerauthentifizierung wurde anonym über Google Firestore abgewickelt, und Firebase wurde zur nahtlosen Verwaltung der Datenbank und des Cloud-Speichers verwendet. Ich stieß auf einige Probleme mit der Speicherung von Chat- und Mediennachrichten in Firebase und der Synchronisierung dieser Nachrichten mit verschiedenen Nutzern. Nachdem ich die Konfiguration und die ID korrekt implementiert hatte, war das Problem jedoch schnell gelöst.",
    "para3": "Das Ergebnis war eine vielseitige und benutzerfreundliche plattformübergreifende Chat-Anwendung. Die Nutzer konnten in Echtzeit interagieren, Bilder austauschen, Standortdaten teilen und mühelos Sprachnachrichten aufnehmen. Ich habe mir vorgenommen, das zu erreichen. Die Kompatibilität der App sowohl mit Apple- als auch mit Android-Geräten sorgte für eine breite Nutzerbasis. Die Integration von Socket.IO ermöglichte eine nahtlose Echtzeitkommunikation und verbesserte das Nutzererlebnis. Der Einsatz von Google Firestore für die anonyme Benutzerauthentifizierung und Firebase für die Verwaltung der Datenbank und des Cloud-Speichers vereinfachte die Backend-Prozesse der App. Insgesamt hat die Chat-App die Projektanforderungen erfolgreich erfüllt, mir ermöglicht, React Native und Firebase zu erlernen und den Nutzern eine ansprechende und interaktive Plattform für die Kommunikation und den Medienaustausch zu bieten.",
    "technologies": "React Native, Expo, Android Studio, Firebase"
  },
  "project6": {
    "introText": "Die clientseitige Anwendung zur Registrierung und Anzeige einer Filmdatenbank, die TypeScript und Angular verwendet und Angular Material für das Styling einsetzt. Typedoc wird verwendet, um die Codebasis zu kommentieren und zu dokumentieren.",
    "para1": "Das Ziel war es, eine alternative Version des MyFlix React-Clients zu entwickeln. Mithilfe von TypeScript und Angular sollte eine robuste und sichere Anwendung mit erweiterten Funktionen entstehen. Die Überwindung der Lernkurve, die mit der strukturierten Ordnerorganisation von Angular und der strengen Typisierung von TypeScript verbunden ist, war eine große Herausforderung. Die Einführung dieser Technologien war jedoch entscheidend, um die Robustheit und Sicherheit der Anwendung zu gewährleisten. Eine große Schwierigkeit war auch die Integration von Benutzerauthentifizierungsfunktionen, die es den Benutzern ermöglichen, sich anzumelden, ihre Daten zu aktualisieren, ihre Lieblingsfilme zu verwalten und detaillierte Filmdaten von der serverseitigen Movie API abzurufen.",
    "para2": "Um diese Aufgabe zu bewältigen, habe ich TypeScript und Angular verwendet, um die clientseitigen Komponenten zu erstellen. Angular Material wurde als UI-Bibliothek verwendet, um eine optisch ansprechende und reaktionsfähige Benutzeroberfläche zu schaffen. Typedoc wurde eingesetzt, um die Codebasis umfassend zu dokumentieren. Anfangs war es eine Herausforderung, mich mit dem strukturierten Ordnersystem von Angular und der strengen Typisierung von TypeScript vertraut zu machen, aber schließlich konnte ich sie nutzen und Schnittstellen definieren, um eine klare Datenstruktur innerhalb der Anwendung zu schaffen. Dieser Ansatz hat Bugs und Fehler im Code deutlich reduziert und die Robustheit der Anwendung insgesamt verbessert. Die Implementierung von Benutzerauthentifizierungsfunktionen wie Anmeldung, Profilaktualisierung und Verwaltung der Lieblingsfilme war ein wesentlicher Bestandteil des Entwicklungsprozesses, aber meine Vertrautheit mit der Movie API-Datenbank und dem vorherigen React-Client-Projekt hat dies sehr erleichtert.",
    "para3": "Das Endergebnis dieser Bemühungen war eine sichere, funktionsreiche Client-Anwendung. Durch die Überwindung der Lernkurve und die Einbeziehung des strukturierten Ansatzes von Angular und der strengen Typisierung von TypeScript erreichte die Anwendung ein hohes Maß an Robustheit und Sicherheit. Die Integration der Typedoc-Dokumentation sorgte für eine umfassende und leicht zugängliche Dokumentation der Codebasis und erleichterte die Wartung und zukünftige Entwicklung. Die mit Angular Material gestaltete Benutzeroberfläche der Anwendung bot ein optisch ansprechendes und reaktionsschnelles Erlebnis für die Benutzer. Insgesamt lieferte das Projekt erfolgreich eine clientseitige Komponente, die die Anforderungen erfüllte und den Nutzern ein nahtloses Filmblättererlebnis bot.",
    "technologies": "Angular, Angular Material, TypeScript, TypeDoc"
  },

  "toggleWork": {
    "hide": "Verbergen",
    "show": "Anzeigen"
  },
  "contactSection": {
    "title": "Kontaktiere mich",
    "text": "Du findest mich auf einem der unten stehenden Kanäle – lass uns loslegen!"
  }
}
