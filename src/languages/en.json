{
  "headerSection": {
    "line1": "My name is ",
    "line2": ", and this is my",
    "line3": "personal portfolio website",
    "line4": "crafted using ",
    "name": "Mark",
    "codeLang": "React"
  },
  "profileSection": {
    "line1": "I am a Full Stack Web Developer born in the UK but living in Germany",
    "line2": "Full stack web developer with a background in education and technology. Skillset in building front-end and back-end applications, including web pages and both web-based (WPA) and native apps. Responsive, accessible, and user-friendly designs including customer-orientated features, developing, testing, debugging, and launching. Excited to contribute to the future of the web development and the technology industry."
  },
  "toggleSkills": {
    "hide": "Hide Skills",
    "show": "Show Skills"
  },
  "workTitle": {
    "title": "Recent Work"
  },
  "projectLabels": {
    "introTitle": "What is it?",
    "processTitle": "The Build Process",
    "technologies": "Built using: ",
    "visitSite": "Visit the site: ",
    "visitRepo": "Visit the repository: "
  },
  "project1": {
    "introText": "An app that dynamically populates the page with Pokemon data from an API. The app allows you to search the list for a Pokemon by name, and when clicked on displays a modal box with the Pokemon's name, type, and an image. It is built using JavaScript, HTML and CSS with Bootstrap styling.",
    "para1": "The aim of this project was mastering JavaScript to create an app that could efficiently fetch data from an API and display it correctly. One of the major hurdles was writing JavaScript promises to retrieve data from the API while ensuring the data returned was in the correct format. Identifying and rectifying errors in the data retrieval process posed a significant challenge. Additionally, optimizing the app's performance, particularly in handling API requests, presented a major obstacle.",
    "para2": "After creating thr base HTML layout, I began by working on JavaScript promises, conducting thorough testing, and utilizing console logging to identify issues in the API calls. Through this iterative approach, I was able to troubleshoot issues effectively and successfully pull the data from the API. I further expanded my skills by incorporating Bootstrap to style the app and make it responsive. Integrating the API data into both the main page and the Bootstrap modal box was a crucial step that required to pull everything together. To address the slow performance caused by API requests, I made the decision to replace individual Pokémon images with a static Pokémon ball image. While this sacrificed some aesthetics, it significantly improved the app's speed and responsiveness.",
    "para3": "The end result of these efforts was the successful creation of a Pokémon database application. Despite the challenges, I achieved my goal of developing a functional tool that allows users to find their favorite Pokémon. Through this project, I not only honed my JavaScript skills but also gained valuable experience in API integration, error handling, and performance optimization. While some aesthetic compromises were made to ensure optimal functionality, the final product fulfilled its purpose, providing users with a practical and efficient way to explore and discover their favorite Pokémon.",
    "technologies": "HTML, CSS, Bootstrap, JavaScript"
  },
  "project2": {
    "introText": "The server-side component of a movies application. The webpage is hosted via Heroku and built using Node.js, Express using REST architecture. The business logic is modeled with Mongoose and the database built with MongoDB. The API is tested using Postman and includes token based authorisation and authentication. JSdoc is used to comment the codebase and for documentation. The database itself holds information on movies, and users, and allows for basic CRUD operations via the specified endpoints.",
    "para1": "The purpose in building this database was to establish secure and efficient communication between the frontend and backend components. The first challenge was implementing token-based authorization and authentication to ensure user data security. This involved tasks such as password hashing and token creation, which were unfamiliar territories. Additionally, creating a middleware function to verify and authenticate user tokens presented a significant challenge.",
    "para2": "I started by utilizing Node.js and Express to create essential requests and endpoints. Following this, I built the database in MongoDB, establishing the foundation for data storage. Connecting the endpoints to the database required careful attention to detail, ensuring the correct information could be retrieved. To tackle the authentication challenge, I integrated bcrypt and jsonwebtoken packages, enabling password hashing and token generation for each user. Developing a middleware function to validate tokens and authenticate users demanded focused effort, but I successfully implemented this crucial security measure. To enhance code readability and maintainability, I added JSDoc comments, providing comprehensive documentation for the codebase.",
    "para3": "The conclusion was a fully functional and secure database system. Through overcoming the challenges, I created a robust backend infrastructure that enabled the storage and retrieval of movie and user information. Token-based authorization and authentication mechanisms provided a high level of data security, ensuring user privacy. Additionally, the implementation of JSDoc comments enhanced the codebase's clarity and accessibility. This project not only delivered a functional database but also provided valuable insights into secure API development and documentation practices, making it a significant learning experience.",
    "technologies": "Node.js, Express, MongoDB"
  },
  "project3": {
    "introText": "The client-side component of the Movie API database. The application is a single-page application (SPA) that allows users to sign up, update their information, and add and remove favorite movies, as well as to filter and retrieve movie information, including genre and director, from the existing server-side Movie API. It is built using React with Parcel as its build tool, and uses React Bootstrap as a UI library for styling and responsiveness.",
    "para1": "The goal was to develop a user-friendly and feature-rich movie browsing SPA using React and React Bootstrap. React was chosen as the framework/library partially due to it's suitability for the project, and also for learning purposes - I had never used React prior to this project.",
    "para2": "I started by creating essential components and endpoints to enable user registration, profile management, and favorite movie manipulation. I then extended the functionality by integrating components and endpoints that allowed users to retrieve detailed movie information, including genres and directors, from the existing server-side Movie API. Subsequently, I implemented components and endpoints for users to filter movies by title, enhancing the search experience. Finally, I applied React Bootstrap styling and ensured responsiveness to optimize the website's visual appeal and user experience.",
    "para3": "The result of these efforts was a fully functional and responsive movie browsing website. The integration of React and React Bootstrap not only met the my expectations but also provided valuable hands-on experience, showcasing the successful creation of an interactive and visually appealing web platform. It also served as a valuable learning experience, allowing me to gain experience using a new approach to building SPA's and demonstrating the effective use of React and React Bootstrap to develop a feature-rich and responsive website.",
    "technologies": "React, React Bootstrap, JavaScript, Parcel, JSDoc"
  },
  "project4": {
    "introText": "A progressive web app (PWA) that allows you to search by location to see what events are happening in that city. Authentication is via Google and so requires a Google account, and the app can be saved on the desktop or homescreen for easy access and allows offline functionality.",
    "para1": "The aim of this project was mastering JavaScript to create an app that could efficiently fetch data from an API and display it correctly. One of the major hurdles was writing JavaScript promises to retrieve data from the API while ensuring the data returned was in the correct format. Identifying and rectifying errors in the data retrieval process posed a significant challenge. Additionally, optimizing the app's performance, particularly in handling API requests, presented a major obstacle.The first task was to decide how to build an interface allowing users to search for events by location and then fetching data from a calendar API to update the app dynamically. Implementing secure user authentication as well as ensuring offline functionality, and enabling easy installation on desktops and smartphones were also essential requirements. The project also aimed for robust testing through a Test-driven development (TDD) approach throughout the development process",
    "para2": "To address these challenges, I built the PWA by incorporating Google API Services for event data retrieval and authentication. The app's frontend was designed responsively using React to handle and showcase event details, including start times, locations, and descriptions, with a user-friendly toggle feature. A graphical overlay was implemented using a visulization library to transform the API data into a visual breakdown of event types and quantities in each location. AWS credentials were then set up in order to implement serverless technlogy and utlize lambda functions for the backend functionality. This allowed user authentication to be integrated through Google OAuth2.0, requiring a Google account for access. Progressive functionality was implemented along with service workers to allow the app to be installable and accessible directly from desktop and smartphone home screens, even when offline. Test-driven development (TDD) techniques were employed through, utilizing Jest, Cucumber, and Puppeteer for comprehensive testing, achieving a robust coverage rate of >=90%. Continuous integration (CI) pipelines were established for efficient deployment and updates.",
    "para3": "The result of these efforts was a fully functional and secure progressive web app, with a visually appealing and user-friendly interface. Seamless data retrieval from the Google Calendar API and easy and secure authentication, as well as easy installation and offline access, further enhanced the user experience. Rigorous testing practices, including a TDD approach with Jest, Cucumber, and Puppeteer, contributed to ensuring correct functionality at each stage of development. The project was also a valuable experience for my future development, allowing me to implementing serverless functions, alongside rigourous testing methods and a CI approach.",
    "technologies": "React, Bootstrap, JavaScript, AWS Lambda, Google API Services, Jest"
  },
  "project5": {
    "introText": "A Chat App built with React Native, Expo and Firebase.",
    "para1": "The aim was to develop a cross-platform chat application using React Native, compatible with both Apple and Android operating systems. The app needed to offer a seamless mobile experience, allowing users to chat in real-time, exchange images, share location data, and record voice messages. Implementing features like real-time communication, media sharing, and authentication while ensuring smooth functionality on various devices were all requirements of this project.",
    "para2": "To begin with, I utilized React Native to build the Chat App, ensuring compatibility with both Apple and Android platforms. My familiarity with React Native allowed me to quickly establish the app's basic structure and functionality. The app was tested continuously using Expo as a simulator for iPhone and Android Studio as an emulator. While Expo was staright forward to set up, I had some intial problems with Android Studio. However, changing the configuration on my development device resolved the main issues. The chat interface and functionality were created using the Gifted Chat library, providing users with the ability to customize their experience by entering their name and choosing a background. Real-time communication was enabled through Socket.IO, allowing users to chat instantly. The app was equipped with the capability to send images from the device's image library, capture pictures using the device's camera, share location data via a map view, and record voice messages. User authentication was handled anonymously by Google Firestore, and Firebase was utilized to manage the database and cloud storage seamlessly. I encountered some issues with the storage of chat and media messages in Firebase, and syncing those to seperate users. However, after correctly implementing the configuration and id, this was quikclz resolved.",
    "para3": "This resulted in a versatile and user-friendly cross-platform chat application. Users could interact in real-time, exchange images, share location data, and record voice messages effortlessly. I set out to achieve. The app's compatibility with both Apple and Android devices ensured a wide user base. The integration of Socket.IO facilitated seamless real-time communication, enhancing the user experience. The use of Google Firestore for anonymous user authentication and Firebase for database and cloud storage management streamlined the app's backend processes. Overall, the Chat App successfully met the project requirements, allowed me to learn React Native and Firebase, while providing users with an engaging and interactive platform for communication and media sharing.",
    "technologies": "React Native, Expo, Android Studio, Firebase"
  },
  "project6": {
    "introText": "The client-side application for registering and viewing a movie database, using TypeScript and Angular, and uses Angular Material for styling. Typedoc is used to comment the codebase and for documentation.",
    "para1": "The objective was develop an alternative version of the MyFlix React client. Using TypeScript and Angular, the goal was to create a robust and secure application with enhanced functionality. Overcoming the learning curve associated with Angular's structured folder organization and TypeScript's strict typing was a significant challenge. However, embracing these technologies was crucial to ensuring robustness and security in the application. A major difficulty also involved integrating user authentication features, allowing users to sign up, update their information, manage favorite movies, and retrieve detailed movie data from the server-side Movie API.",
    "para2": "To tackle this, I employed TypeScript and Angular to build the client-side components. Angular Material was utilized as the UI library, providing a visually appealing and responsive user interface. Typedoc was employed to document the codebase comprehensively. Familiarising myself with Angular's structured folder system and TypeScript's strict typing was a challnge at first, but I eventually leveraged it and defined interfaces to establish a clear data structure within the application. This approach significantly reduced bugs and errors in the code, enhancing the overall robustness of the application. Implementing user authentication functionalities, such as signup, profile updating, and managing favorite movies, was an integral part of the development process, but my familiarity with the Movie API database and previous React client project made this a lot easier.",
    "para3": "The end result of these efforts was a secure, feature-rich client application. By overcoming the learning curve and embracing Angular's structured approach and TypeScript's strict typing, the application achieved a high level of robustness and security. The integration of Typedoc documentation ensured comprehensive and accessible codebase documentation, facilitating maintenance and future development. The application's user interface, designed with Angular Material, provided a visually appealing and responsive experience for users. Overall, the project successfully delivered a client-side component that met the requirements and provided a seamless movie browsing experience for users.",
    "technologies": "Angular, Angular Material, TypeScript, TypeDoc"
  },
  "toggleWork": {
    "hide": "See less",
    "show": "See more"
  },

  "contactSection": {
    "title": "Get in Touch",
    "text": "Find me on on the one of the channels below and let's get the ball rolling!"
  }
}
