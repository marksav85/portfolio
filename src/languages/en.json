{
  "headerSection": {
    "line1": "My name is ",
    "line2": ", and this is my",
    "line3": "personal portfolio website",
    "line4": "crafted using ",
    "name": "Mark",
    "codeLang": "React"
  },
  "profileSection": {
    "line1": "I am a Full Stack Web Developer born in the UK but living in Germany",
    "line2": "Full stack web developer with a background in education and technology. Skillset in building front-end and back-end applications, including web pages and both web-based (WPA) and native apps. Responsive, accessible, and user-friendly designs including customer-orientated features, developing, testing, debugging, and launching. Excited to contribute to the future of the web development and the technology industry."
  },
  "projectLabels": {
    "introTitle": "What is it?",
    "processTitle": "The Build Process",
    "technologies": "Built using: ",
    "visitSite": "Visit the site: ",
    "visitRepo": "Visit the repository: "
  },
  "project1": {
    "introText": "An app that dynamically populates the page with Pokemon data from an API. The app allows you to search the list for a Pokemon by name, and when clicked on displays a modal box with the Pokemon's name, type, and an image. It is built using JavaScript, HTML and CSS with Bootstrap styling.",
    "para1": "The aim of this project was mastering JavaScript to create an app that could efficiently fetch data from an API and display it correctly. One of the major hurdles was writing JavaScript promises to retrieve data from the API while ensuring the data returned was in the correct format. Identifying and rectifying errors in the data retrieval process posed a significant challenge. Additionally, optimizing the app's performance, particularly in handling API requests, presented a major obstacle.",
    "para2": "After creating thr base HTML layout, I began by working on JavaScript promises, conducting thorough testing, and utilizing console logging to identify issues in the API calls. Through this iterative approach, I was able to troubleshoot issues effectively and successfully pull the data from the API. I further expanded my skills by incorporating Bootstrap to style the app and make it responsive. Integrating the API data into both the main page and the Bootstrap modal box was a crucial step that required to pull everything together. To address the slow performance caused by API requests, I made the decision to replace individual Pokémon images with a static Pokémon ball image. While this sacrificed some aesthetics, it significantly improved the app's speed and responsiveness.",
    "para3": "The end result of these efforts was the successful creation of a Pokémon database application. Despite the challenges, I achieved my goal of developing a functional tool that allows users to find their favorite Pokémon. Through this project, I not only honed my JavaScript skills but also gained valuable experience in API integration, error handling, and performance optimization. While some aesthetic compromises were made to ensure optimal functionality, the final product fulfilled its purpose, providing users with a practical and efficient way to explore and discover their favorite Pokémon.",
    "technologies": "HTML, CSS, Bootstrap, JavaScript"
  },
  "project2": {
    "introText": "The server-side component of a movies application. The webpage is hosted via Heroku and built using Node.js, Express using REST architecture. The business logic is modeled with Mongoose and the database built with MongoDB. The API is tested using Postman and includes token based authorisation and authentication. JSdoc is used to comment the codebase and for documentation. The database itself holds information on movies, and users, and allows for basic CRUD operations via the specified endpoints.",
    "para1": "The purpose in building this database was to establish secure and efficient communication between the frontend and backend components. The first challenge was implementing token-based authorization and authentication to ensure user data security. This involved tasks such as password hashing and token creation, which were unfamiliar territories. Additionally, creating a middleware function to verify and authenticate user tokens presented a significant challenge.",
    "para2": "I started by utilizing Node.js and Express to create essential requests and endpoints. Following this, I built the database in MongoDB, establishing the foundation for data storage. Connecting the endpoints to the database required careful attention to detail, ensuring the correct information could be retrieved. To tackle the authentication challenge, I integrated bcrypt and jsonwebtoken packages, enabling password hashing and token generation for each user. Developing a middleware function to validate tokens and authenticate users demanded focused effort, but I successfully implemented this crucial security measure. To enhance code readability and maintainability, I added JSDoc comments, providing comprehensive documentation for the codebase.",
    "para3": "The conclusion was a fully functional and secure database system. Through overcoming the challenges, I created a robust backend infrastructure that enabled the storage and retrieval of movie and user information. Token-based authorization and authentication mechanisms provided a high level of data security, ensuring user privacy. Additionally, the implementation of JSDoc comments enhanced the codebase's clarity and accessibility. This project not only delivered a functional database but also provided valuable insights into secure API development and documentation practices, making it a significant learning experience.",
    "technologies": "Node.js, Express, MongoDB"
  },
  "project3": {
    "introText": "An app that dynamically populates the page with Pokemon data from an API. The app allows you to search the list for a Pokemon by name, and when clicked on displays a modal box with the Pokemon's name, type, and an image. It is built using JavaScript, HTML and CSS with Bootstrap styling.",
    "para1": "The aim of this project was mastering JavaScript to create an app that could efficiently fetch data from an API and display it correctly. One of the major hurdles was writing JavaScript promises to retrieve data from the API while ensuring the data returned was in the correct format. Identifying and rectifying errors in the data retrieval process posed a significant challenge. Additionally, optimizing the app's performance, particularly in handling API requests, presented a major obstacle.",
    "para2": "After creating thr base HTML layout, I began by working on JavaScript promises, conducting thorough testing, and utilizing console logging to identify issues in the API calls. Through this iterative approach, I was able to troubleshoot issues effectively and successfully pull the data from the API. I further expanded my skills by incorporating Bootstrap to style the app and make it responsive. Integrating the API data into both the main page and the Bootstrap modal box was a crucial step that required to pull everything together. To address the slow performance caused by API requests, I made the decision to replace individual Pokémon images with a static Pokémon ball image. While this sacrificed some aesthetics, it significantly improved the app's speed and responsiveness.",
    "para3": "The end result of these efforts was the successful creation of a Pokémon database application. Despite the challenges, I achieved my goal of developing a functional tool that allows users to find their favorite Pokémon. Through this project, I not only honed my JavaScript skills but also gained valuable experience in API integration, error handling, and performance optimization. While some aesthetic compromises were made to ensure optimal functionality, the final product fulfilled its purpose, providing users with a practical and efficient way to explore and discover their favorite Pokémon.",
    "technologies": "HTML, CSS, Bootstrap, JavaScript"
  },
  "project4": {
    "introText": "An app that dynamically populates the page with Pokemon data from an API. The app allows you to search the list for a Pokemon by name, and when clicked on displays a modal box with the Pokemon's name, type, and an image. It is built using JavaScript, HTML and CSS with Bootstrap styling.",
    "para1": "The aim of this project was mastering JavaScript to create an app that could efficiently fetch data from an API and display it correctly. One of the major hurdles was writing JavaScript promises to retrieve data from the API while ensuring the data returned was in the correct format. Identifying and rectifying errors in the data retrieval process posed a significant challenge. Additionally, optimizing the app's performance, particularly in handling API requests, presented a major obstacle.",
    "para2": "After creating thr base HTML layout, I began by working on JavaScript promises, conducting thorough testing, and utilizing console logging to identify issues in the API calls. Through this iterative approach, I was able to troubleshoot issues effectively and successfully pull the data from the API. I further expanded my skills by incorporating Bootstrap to style the app and make it responsive. Integrating the API data into both the main page and the Bootstrap modal box was a crucial step that required to pull everything together. To address the slow performance caused by API requests, I made the decision to replace individual Pokémon images with a static Pokémon ball image. While this sacrificed some aesthetics, it significantly improved the app's speed and responsiveness.",
    "para3": "The end result of these efforts was the successful creation of a Pokémon database application. Despite the challenges, I achieved my goal of developing a functional tool that allows users to find their favorite Pokémon. Through this project, I not only honed my JavaScript skills but also gained valuable experience in API integration, error handling, and performance optimization. While some aesthetic compromises were made to ensure optimal functionality, the final product fulfilled its purpose, providing users with a practical and efficient way to explore and discover their favorite Pokémon.",
    "technologies": "HTML, CSS, Bootstrap, JavaScript"
  },
  "project5": {
    "introText": "An app that dynamically populates the page with Pokemon data from an API. The app allows you to search the list for a Pokemon by name, and when clicked on displays a modal box with the Pokemon's name, type, and an image. It is built using JavaScript, HTML and CSS with Bootstrap styling.",
    "para1": "The aim of this project was mastering JavaScript to create an app that could efficiently fetch data from an API and display it correctly. One of the major hurdles was writing JavaScript promises to retrieve data from the API while ensuring the data returned was in the correct format. Identifying and rectifying errors in the data retrieval process posed a significant challenge. Additionally, optimizing the app's performance, particularly in handling API requests, presented a major obstacle.",
    "para2": "After creating thr base HTML layout, I began by working on JavaScript promises, conducting thorough testing, and utilizing console logging to identify issues in the API calls. Through this iterative approach, I was able to troubleshoot issues effectively and successfully pull the data from the API. I further expanded my skills by incorporating Bootstrap to style the app and make it responsive. Integrating the API data into both the main page and the Bootstrap modal box was a crucial step that required to pull everything together. To address the slow performance caused by API requests, I made the decision to replace individual Pokémon images with a static Pokémon ball image. While this sacrificed some aesthetics, it significantly improved the app's speed and responsiveness.",
    "para3": "The end result of these efforts was the successful creation of a Pokémon database application. Despite the challenges, I achieved my goal of developing a functional tool that allows users to find their favorite Pokémon. Through this project, I not only honed my JavaScript skills but also gained valuable experience in API integration, error handling, and performance optimization. While some aesthetic compromises were made to ensure optimal functionality, the final product fulfilled its purpose, providing users with a practical and efficient way to explore and discover their favorite Pokémon.",
    "technologies": "HTML, CSS, Bootstrap, JavaScript"
  },
  "project6": {
    "introText": "An app that dynamically populates the page with Pokemon data from an API. The app allows you to search the list for a Pokemon by name, and when clicked on displays a modal box with the Pokemon's name, type, and an image. It is built using JavaScript, HTML and CSS with Bootstrap styling.",
    "para1": "The aim of this project was mastering JavaScript to create an app that could efficiently fetch data from an API and display it correctly. One of the major hurdles was writing JavaScript promises to retrieve data from the API while ensuring the data returned was in the correct format. Identifying and rectifying errors in the data retrieval process posed a significant challenge. Additionally, optimizing the app's performance, particularly in handling API requests, presented a major obstacle.",
    "para2": "After creating thr base HTML layout, I began by working on JavaScript promises, conducting thorough testing, and utilizing console logging to identify issues in the API calls. Through this iterative approach, I was able to troubleshoot issues effectively and successfully pull the data from the API. I further expanded my skills by incorporating Bootstrap to style the app and make it responsive. Integrating the API data into both the main page and the Bootstrap modal box was a crucial step that required to pull everything together. To address the slow performance caused by API requests, I made the decision to replace individual Pokémon images with a static Pokémon ball image. While this sacrificed some aesthetics, it significantly improved the app's speed and responsiveness.",
    "para3": "The end result of these efforts was the successful creation of a Pokémon database application. Despite the challenges, I achieved my goal of developing a functional tool that allows users to find their favorite Pokémon. Through this project, I not only honed my JavaScript skills but also gained valuable experience in API integration, error handling, and performance optimization. While some aesthetic compromises were made to ensure optimal functionality, the final product fulfilled its purpose, providing users with a practical and efficient way to explore and discover their favorite Pokémon.",
    "technologies": "HTML, CSS, Bootstrap, JavaScript"
  },
  "toggle": {
    "hide": "See less",
    "show": "See more"
  },

  "contactSection": {
    "title": "Get in Touch",
    "text": "Find me on on the one of the channels below and let's get the ball rolling!"
  }
}
